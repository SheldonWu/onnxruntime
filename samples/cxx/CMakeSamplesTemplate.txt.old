cmake_minimum_required(VERSION 3.24)

# ensure SAMPLE_SOURCES is set
if (NOT SAMPLE_SOURCES)
   message(FATAL_ERROR "You must define non empty SAMPLE_SOURCES variable before including this template")
endif()

#set_ifndef(PLUGINS_NEEDED OFF)
#set_ifndef(SAMPLE_PARSERS "none")

set(TARGET_DIR ${CMAKE_CURRENT_SOURCE_DIR})

get_filename_component(SAMPLES_DIR ../ ABSOLUTE)
get_filename_component(SAMPLE_DIR_NAME ${TARGET_DIR} NAME)

#set_ifndef(CUDA_INSTALL_DIR /usr/local/cuda)

# SAMPLES_COMMON_SOURCES
set(SAMPLES_COMMON_SOURCES
#    ${SAMPLES_DIR}/common/logger.cpp
#    ""
)

# add underscores (snake) to camelCase cases
string(REGEX REPLACE "(.)([A-Z][a-z]+)" "\\1_\\2" SAMPLE_NAME_SNAKE_MIXED ${SAMPLE_DIR_NAME})
string(REGEX REPLACE "([a-z0-9])([A-Z])" "\\1_\\2" SAMPLE_NAME_SNAKE_MIXED ${SAMPLE_NAME_SNAKE_MIXED})
string(TOLOWER ${SAMPLE_NAME_SNAKE_MIXED} SAMPLE_NAME_SNAKE)

## fix a few sample names
#string(REGEX REPLACE "google_net" "googlenet" SAMPLE_NAME_FIXED ${SAMPLE_NAME_SNAKE})
#string(REGEX REPLACE "([a-zA-Z0-0])api" "\\1_api" SAMPLE_NAME_FIXED ${SAMPLE_NAME_FIXED})
#string(REGEX REPLACE "_rcnn" "RCNN" SAMPLE_NAME_FIXED ${SAMPLE_NAME_FIXED})

set(SAMPLE_NAME ${SAMPLE_NAME_FIXED})# CACHE STRING "binary name of the sample")

set(TARGET_NAME ${SAMPLE_NAME})

add_executable(${TARGET_NAME}
    ${SAMPLE_SOURCES}
    ${SAMPLES_COMMON_SOURCES}
)
set(DEPS_LIST "")

#if(BUILD_PLUGINS)
#    list(APPEND DEPS_LIST nvinfer_plugin)
#endif()

#if(BUILD_PARSERS)
#    list(APPEND DEPS_LIST nvuffparser nvcaffeparser nvonnxparser)
#endif()

#if(BUILD_PLUGINS OR BUILD_PARSERS)
#    add_dependencies(${TARGET_NAME}
#        ${DEPS_LIST}
#    )
#endif()

set(ONNX_ROOT_DIR ${PROJECT_SOURCE_DIR}/../..)
set(ONNX_LIB_DIR ${ONNX_ROOT_DIR}/build/Linux/RelWithDebInfo)
set(ONNX_INCLUDE_DIR ${ONNX_ROOT_DIR}/include/onnxruntime/core)
message("Project source dir: " ${PROJECT_SOURCE_DIR} )
message(${ONNX_ROOT_DIR})
message(${ONNX_LIB_DIR})
message(${ONNX_INCLUDE_DIR})
message("Target: " ${TARGET_DIR} ${TARGET_NAME} ${TARGETS})


set(SAMPLE_OUT_DIR, $(ONNX_ROOT_DIR)/build/Linux/RelWithDebInfo)

include_directories(${TARGET_NAME} ${ONNX_INCLUDE_DIR} ${TARGET_DIR}
    #PRIVATE ${PROJECT_SOURCE_DIR}
    #PUBLIC ${ONNX_INCLUDE_DIR}
    #PUBLIC ${CUDA_INSTALL_DIR}/include
    #PRIVATE ${SAMPLES_DIR}/common
    #PRIVATE ${TARGET_DIR}
)

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # using GCC
    set(CMAKE_VERBOSE_MAKEFILE 1)
    set_target_properties(${PROJECT_NAME} PROPERTIES COMPILE_DEFINITIONS "Bits64_;UNIX;_BOOL;LINUX;FUNCPROTO;_GNU_SOURCE;LINUX_64;REQUIRE_IOSTREAM")

    set(GCC_COMPILE_OPTIONS "-m64;-fPIC;-fno-strict-aliasing;-Wall;-Wno-multichar;-Wno-comment;-Wno-sign-compare;-funsigned-char;-pthread;-Wno-deprecated;-Wno-reorder;-ftemplate-depth-64;-fno-gnu-keywords;-std=c++0x;-Winline")
    set(GCC_COMPILE_DEBUG_OPTIONS "${GCC_COMPILE_OPTIONS};-ggdb;-O0")
    set(GCC_COMPILE_RELEASE_OPTIONS "${GCC_COMPILE_OPTIONS};-O3")
    target_compile_options(${PROJECT_NAME} PUBLIC "$<$<CONFIG:Debug>:${GCC_COMPILE_DEBUG_OPTIONS}>")
    target_compile_options(${PROJECT_NAME} PUBLIC "$<$<CONFIG:Release>:${GCC_COMPILE_RELEASE_OPTIONS}>")

elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # using Visual Studio C++
    set(MSVC_COMPILE_OPTIONS "/MP;/W3;/w34710;/Gy;/Zc:wchar_t;/nologo;/std:c++0x /EHsc")
    set(MSVC_COMPILE_DEBUG_OPTIONS "${MSVC_COMPILE_OPTIONS} /ZI /Od")
    set(MSVC_COMPILE_RELEASE_OPTIONS "${MSVC_COMPILE_OPTIONS} /O2")
    target_compile_options(${PROJECT_NAME} PUBLIC "$<$<CONFIG:Debug>:${MSVC_COMPILE_DEBUG_OPTIONS}>")
    target_compile_options(${PROJECT_NAME} PUBLIC "$<$<CONFIG:Release>:${MSVC_COMPILE_RELEASE_OPTIONS}>")
endif()

target_compile_options(${TARGET_NAME} "-fno-rtti")

set(SAMPLE_DEP_LIBS
#    ${CUDART_LIB}
#    ${CUBLAS_LIB}
#    ${CUDNN_LIB}
#    nvinfer
#    ${CMAKE_DL_LIBS}
#    ${CMAKE_THREAD_LIBS_INIT}
    onnxruntime
)

message("DEP LIBS: ", ${SAMPLE_DEP_LIBS})

# Necessary to link nvinfer_plugin library.
link_libraries(${TARGET_NAME}
    ${SAMPLE_DEP_LIBS}
    -Wl,--unresolved-symbols=ignore-in-shared-libs
)

set_target_properties(${TARGET_NAME} PROPERTIES LINK_FLAGS "-Wl,--exclude-libs,ALL")

set_target_properties(${TARGET_NAME} PROPERTIES DEBUG_POSTFIX ${TRT_DEBUG_POSTFIX})

set_target_properties(${TARGET_NAME}
    PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${SAMPLE_OUT_DIR}"
    LIBRARY_OUTPUT_DIRECTORY "${SAMPLE_OUT_DIR}"
    RUNTIME_OUTPUT_DIRECTORY "${SAMPLE_OUT_DIR}"
)

add_dependencies(samples ${TARGET_NAME})

################################### INSTALLATION ########################################

#install(TARGETS ${TARGET_NAME}
#        RUNTIME DESTINATION bin
#        LIBRARY DESTINATION lib
#        ARCHIVE DESTINATION lib
#)

##################################### SUMMARY ###########################################

#get_filename_component(LICENSE_STATUS ../ ABSOLUTE)
#get_filename_component(LICENSE_STATUS "${LICENSE_STATUS}" NAME)

#message(STATUS "Adding new sample: ${TARGET_NAME}")
#message(STATUS "    - Parsers Used: ${SAMPLE_PARSERS}")
#message(STATUS "    - InferPlugin Used: ${PLUGINS_NEEDED}")
#message(STATUS "    - Licensing: ${LICENSE_STATUS}")
